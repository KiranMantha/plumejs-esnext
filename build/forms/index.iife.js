var plumejs_forms=function(i){"use strict";var m=Object.defineProperty;var y=(i,l,a)=>l in i?m(i,l,{enumerable:!0,configurable:!0,writable:!0,value:a}):i[l]=a;var u=(i,l,a)=>(y(i,typeof l!="symbol"?l+"":l,a),a);(()=>{try{return new CSSStyleSheet,!0}catch{return!1}})();const l=r=>typeof r=="function",a=Object.create(null);let d=null;function f(r){const e=a[d];let t=r;function s(){return t}return s.set=function(n){l(n)?t=n(t):t=n,e()},s}const h=r=>typeof r=="function";function _(r,e){return r.nodeName&&r.nodeName.toLowerCase()===e.toLowerCase()}const g=r=>{let e;switch(r.nodeName&&r.nodeName.toLowerCase()){case"input":case"textarea":{["radio","checkbox"].includes(r.type)?e=r.checked?r.value!==null&&r.value!=="on"?r.value:!0:!1:e=r.value;break}case"select":{const t=r.type==="select-one",n=[...Array.from(r.options).filter(o=>!o.disabled&&(!o.parentNode.disabled||!_(o.parentNode,"optgroup")))].filter(o=>o.selected).map(o=>o.value??(o.textContent.match(/[^\x20\t\r\n\f]+/g)||[]).join(" "));e=t?n[0]:n;break}default:{e=r.value;break}}return e};class v{constructor(e){u(this,"_initialValues");u(this,"_controls",new Map);u(this,"_errors",new Map);u(this,"_errorCount");u(this,"_isSubmitted",!1);this._errorCount=f(0),this._initialValues=e;for(const[t,s]of Object.entries(e)){const n=[...Array.isArray(s)?s:[s]];this._controls.set(t,{value:n[0],validators:n.length>1?n[1]:[],isTouched:!1,errorMessage:""})}}get hasErrors(){return!!this._errorCount()}get errors(){return this._errors}get valid(){return!this._errors.size}get value(){const e={};for(const[t,s]of this._controls)e[t]=s.value;return e}get submitted(){return this._isSubmitted}getControl(e){return this._controls.get(e)}register(e){return{attrs:{name:e,value:this.getControl(e).value,onchange:t=>{const s=g(t.target);this.getControl(e).value=s},onblur:()=>{this.getControl(e).isTouched=!0,this._checkValidity(e)}}}}handleSubmit(e,t){e.preventDefault(),this._isSubmitted=!0,this._checkValidity(),t(this.value)}reset(){for(const[e,t]of Object.entries(this._initialValues)){const s=[...Array.isArray(t)?t:[t]],{validators:n}=this._controls.get(e);this._controls.set(e,{value:JSON.parse(JSON.stringify(s))[0],validators:n,isTouched:!1,errorMessage:""})}this._isSubmitted=!1,this._errors.clear(),this._errorCount.set(0)}_checkValidity(e){if(e)this._executeValidators(e);else{this._errors.clear();for(const[t]of this._controls)this._executeValidators(t)}this._errorCount.set(this._errors.size)}_executeValidators(e){const{value:t,validators:s}=this._controls.get(e);let n="";for(const o of s){const c=h(o)?o(t):o.rule(t);if(c!==null){this._errors.has(e)?this._errors.set(e,{...this._errors.get(e),...c}):this._errors.set(e,c),n=h(o)?"error":o.message;break}else this._errors.delete(e)}this._controls.get(e).errorMessage=n}}class b{static required(e){return e.length?null:{required:!0}}static min(e){return t=>t.length>=e?null:{minLength:{requiredLength:e}}}static max(e){return t=>t.length<=e?null:{maxLength:{requiredLength:e}}}static pattern(e){return t=>new RegExp(e).test(t)?null:{pattern:!0}}}return i.FormBuilder=v,i.Validators=b,Object.defineProperty(i,Symbol.toStringTag,{value:"Module"}),i}({});
